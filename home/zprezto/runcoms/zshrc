#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# START=$(gdate +%s%N);

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# END=$(gdate +%s%N);

# echo $((END-START)) | awk '{print " \t -> Loaded in " $1/1000000000 "s"}'

# Customize to your needs...


# Aliases
# --------------------------------------------------------------------

alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias cd.='cd ..'
alias cd..='cd ..'
alias h="history"
alias pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key copied to pasteboard.'"

alias brews='brew list -1'
alias bubo='brew update && brew outdated'
alias bubc='brew upgrade && brew cleanup'
alias bubu='bubo && bubc && mas upgrade'
alias bcu='brew cask list | xargs brew cask install --force'

alias myip='curl icanhazip.com'

alias glog='git log --graph --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
alias gaa='git add --all'
alias gl='git pull'
alias gf='git diff'
alias gp='git push'
alias gss='git status -s'
alias gci='git commit'
alias gco='git checkout'

alias rs='rails s'
alias rc='rails c'

alias bi='bundle install'
alias bu='bundle update'
alias be='bundle exec'

alias e="$EDITOR"

# Count code lines in some directory.
# $ loc py js css
# # => Lines of code for .py: 3781
# # => Lines of code for .js: 3354
# # => Lines of code for .css: 2970
# # => Total lines of code: 10105
function loc() {
  local total
  local firstletter
  local ext
  local lines
  total=0
  for ext in $@; do
    firstletter=$(echo $ext | cut -c1-1)
    if [[ firstletter != "." ]]; then
      ext=".$ext"
    fi
    lines=`find-exec "*$ext" cat | wc -l`
    lines=${lines// /}
    total=$(($total + $lines))
    echo "Lines of code for ${fg[blue]}$ext${reset_color}: ${fg[green]}$lines${reset_color}"
  done
  echo "${fg[blue]}Total${reset_color} lines of code: ${fg[green]}$total${reset_color}"
}


# Show how much RAM application uses.
# $ ram safari
# # => safari uses 154.69 MBs of RAM.
function ram() {
  local sum
  local items
  local app="$1"
  if [ -z "$app" ]; then
    echo "First argument - pattern to grep from processes"
  else
    sum=0
    for i in `ps aux | grep -i "$app" | grep -v "grep" | awk '{print $6}'`; do
      sum=$(($i + $sum))
    done
    sum=$(echo "scale=2; $sum / 1024.0" | bc)
    if [[ $sum != "0" ]]; then
      echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM."
    else
      echo "There are no processes with pattern '${fg[blue]}${app}${reset_color}' are running."
    fi
  fi
}

# $ size dir1 file2.js
function size() {
  # du -sh "$@" 2>&1 | grep -v '^du:' | sort -nr
  du -shck "$@" | sort -rn | awk '
      function human(x) {
          s="kMGTEPYZ";
          while (x>=1000 && length(s)>1)
              {x/=1024; s=substr(s,2)}
          return int(x+0.5) substr(s,1,1)
      }
      {gsub(/^[0-9]+/, human($1)); print}'
}

# $ aes-enc file.zip
function aes-enc() {
  openssl enc -aes-256-cbc -e -in $1 -out "$1.aes"
}

# $ aes-dec file.zip.aes
function aes-dec() {
  openssl enc -aes-256-cbc -d -in $1 -out "${1%.*}"
}

# Monitor IO in real-time (open files etc).
function openfiles() {
  sudo dtrace -n 'syscall::open*:entry { printf("%s %s",execname,copyinstr(arg0)); }'
}

# 4 lulz.
function compute() {
  while true; do head -n 100 /dev/urandom; sleep 0.1; done \
    | hexdump -C | grep "ca fe"
}

# Load 8 cores at once.
function maxcpu() {
  dn=/dev/null
  yes > $dn & yes > $dn & yes > $dn & yes > $dn &
  yes > $dn & yes > $dn & yes > $dn & yes > $dn &
}

# $ retry ping google.com
function retry() {
  echo Retrying "$@"
  $@
  sleep 1
  retry $@
}

# Open curr dir in preview.app.
function preview() {
  local item=$1
  [[ -z "$item" ]] && item='.'
  open $1 -a 'Preview'
}


# Ruby
# --------------------------------------------------------------------

if [[ -s /usr/local/bin/rbenv ]]; then
  eval "$(rbenv init -)"
fi


# Z integration
# --------------------------------------------------------------------
source `brew --prefix`/etc/profile.d/z.sh

# iTerm
# --------------------------------------------------------------------
# test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

# https://github.com/rgcr/m-cli
# --------------------------------------------------------------------
export PATH=$PATH:/usr/local/m-cli

# golang
# --------------------------------------------------------------------
export GOPATH=$HOME/go_path

# Shortcut functions
# --------------------------------------------------------------------

genpasswd() {
  local l=$1
  [ "$l" == "" ] && l=27
  LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c ${l} | xargs
}

passgen() {
  genpasswd $1 | pbcopy && pbpaste | xargs echo && echo '=> Password copied to pasteboard.'
}

# Pull recursively all the git repos in the directories
git_pull_recursive () {
  find `pwd` -type d -name .git \
  | xargs -n 1 dirname \
  | sort \
  | while read line; do echo $line && cd $line && git pull; done
}

# OSX only functions
if [[ "$OSTYPE" == "darwin"* ]]; then
  alias tac='tail -r'
  o() {
    open --reveal "${1:-.}"
  }
  # c - browse chrome history
  c() {
    local cols sep
    export cols=$(( COLUMNS / 3 ))
    export sep='{::}'

    cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
    sqlite3 -separator $sep /tmp/h \
      "select title, url from urls order by last_visit_time desc" |
    ruby -ne '
      cols = ENV["cols"].to_i
      title, url = $_.split(ENV["sep"])
      len = 0
      puts "\x1b[36m" + title.each_char.take_while { |e|
        if len < cols
          len += e =~ /\p{Han}|\p{Katakana}|\p{Hiragana}|\p{Hangul}/ ? 2 : 1
        end
      }.join + " " * (2 + cols - len) + "\x1b[m" + url' |
    fzf --ansi --multi --no-hscroll --tiebreak=index |
    sed 's#.*\(https*://\)#\1#' | xargs open
  }
fi
